#!/usr/local/bin/python2.7
import os
from addr import *
from scapy.all import *
import time

def generate_packet(nh, packet, split):
    fid=pid & 0xffffffff

    frags = []
    frags.append(IPv6ExtHdrFragment(nh=nh, id=fid, m=1)/str(packet)[:split])
    frags.append(IPv6ExtHdrFragment(nh=nh, id=fid, offset=2)/str(packet)[split:])

    return frags

# ip in ip
def ip6_fragments(ip, split=16):
    return 41, IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6), split

def udp_fragments(ip, split=48, data="IAMSOMEPAYLOAD"):
    return 17, UDP(sport=45234, dport=5005)/data, split

def tcp_fragments(ip, split=56):
    return 6, TCP(sport=45234, dport=5005, flags='S', seq=1000), split

def ipip_fragments(ip, split=40):
    return 4, IP(src="192.168.1.1", dst="192.168.40.40"), split

def ipipopt_fragments(ip, split=40):
    ip4 = IP(src="192.168.1.1", dst="192.168.40.40")
add options

def dccp_short_fragments(ip, split=40):
    ip4 = IP(src="192.168.1.1", dst="192.168.40.40")
generate dccp

def dccp_long_fragments(ip, split=40):
    ip4 = IP(src="192.168.1.1", dst="192.168.40.40")
generate dccp

def gre_fragments(ip, split=40)
    return 47, GRE(), split

generators = [
    ip6_fragments,
    udp_fragments, 
    tcp_fragments, 
    ipip_fragments,
    ipipopt_fragments,
    dccp_fragments,
    gre_fragments,
]

if __name__ == "__main__":
    print "sending rfc7112 compliant and non compliant fragments"
    print "from {} to {}".format(LOCAL_ADDR6, REMOTE_ADDR6)

    # construct a template v6 packet
    pid=os.getpid()
    eid=pid & 0xffff
    ip = IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)
    fid=pid & 0xffffffff

    fragments=[]
    for g in generators:
        frags = generate_fragemnts(g(ip))

        for f in frags:
            frag.append(f)

        frags.reverse()

        for f in frags:
            frag.append(f)

    # bundle each packet(with a frag) into an ethernet frame
    eth=[]
    for f in frag:
            pkt=IPv6(src=LOCAL_ADDR6, dst=REMOTE_ADDR6)/f
            eth.append(Ether(src=LOCAL_MAC, dst=REMOTE_MAC)/pkt)

    sendp(eth, iface=LOCAL_IF)
